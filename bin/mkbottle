#!/usr/bin/env bash

# Builds the bottle for a new version of materialized.
#
# Homebrew wants to manage the bottle-building process via `brew install
# --build-bottle` and `brew bottle`, but these commands are tightly coupled to
# the particulars of Homebrew's pull request and CI flow. See [0] for the gory
# details. Our macOS release tarballs are basically bottles already, so instead
# we've reverse engineered what needs to go into a Homebrew bottle and build the
# bottle by hand. This saves considerable time in CI (25m+), because building
# release binaries on GitHub's macOS infrastructure is unbearably slow.
#
# Crucially, we make the tarballs reproducible (given an official Materialize
# release tarball) so that CI can check that the bottle it downloads is, in
# fact, the output of this script at the tested revision. This requires a good
# bit of tar magic and a particular version of gzip, so we run the build in a
# Docker container where we can tightly control the version of tar and gzip.
#
# [0]: https://jonathanchang.org/blog/maintain-your-own-homebrew-repository-with-binary-bottles/

set -euo pipefail

if [[ $# -ne 1 ]]; then
  echo "usage: $0 VERSION" >&2
  exit 1
fi

cd "$(dirname "$0")/.."

version=${1#v}

container=$(docker run --rm -d buildpack-deps:focal-curl sleep 999999)
trap "docker kill $container > /dev/null" EXIT

docker cp Formula/materialized.rb "$container:/materialized.rb"
docker cp misc/mkbottle-inner.bash "$container:/mkbottle.bash"
docker exec -i "$container" bash /mkbottle.bash "$version"
docker cp "$container:/bottle.tar.gz" bottle.tar.gz
